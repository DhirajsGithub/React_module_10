{"version":3,"sources":["components/Header.module.css","components/UserProfile.module.css","store/counter.js","components/Counter.js","store/auth.js","components/Header.js","components/Auth.js","components/UserProfile.js","App.js","store/index.js","index.js","components/Auth.module.css","components/Counter.module.css"],"names":["module","exports","counterSlice","createSlice","name","initialState","counter","showCounter","reducers","increment","state","decrement","increase","action","payload","toggleCounter","counterActions","actions","Counter","useSelector","dispatch","useDispatch","show","className","classes","value","onClick","authSlice","isAuthenticated","login","logout","authActions","Header","isAuth","auth","header","href","Auth","onSubmit","event","preventDefault","control","htmlFor","type","id","UserProfile","profile","App","store","configureStore","reducer","counterReducer","authReducer","ReactDOM","createRoot","document","getElementById","render"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,QAAU,+B,8HCEtBC,EAAeC,YAAY,CAC7BC,KAAO,UAEPC,aAJiB,CAAEC,QAAS,EAAGC,aAAa,GAK5CC,SAAW,CAEPC,UAFO,SAEIC,GAGPA,EAAMJ,WAEVK,UAPO,SAOID,GACPA,EAAMJ,WAGVM,SAXO,SAWGF,EAAOG,GACbH,EAAMJ,SAAWO,EAAOC,SAE5BC,cAdO,SAcQL,GACXA,EAAMH,aAAeG,EAAMH,gBAM1BS,EAAiBd,EAAae,QAC5Bf,IAAf,Q,OC2BegB,EA7CC,WAEd,IAAMZ,EAAUa,aAAY,SAAAT,GAAK,OAAIA,EAAMJ,QAAQA,WAG7Cc,EAAWC,cAGXC,EAAOH,aAAY,SAAAT,GAAK,OAAIA,EAAMJ,QAAQC,eAuBhD,OACE,uBAAMgB,UAAWC,IAAQlB,QAAzB,UACE,+CACCgB,GAAQ,qBAAKC,UAAWC,IAAQC,MAAxB,SAAgCnB,IACzC,gCACE,wBAAQoB,QA1BW,WAEvBN,EAASJ,EAAeP,cAwBpB,uBACA,wBAAQiB,QAtBU,WAEtBN,EAASJ,EAAeJ,SAAS,MAoB7B,4BACA,wBAAQc,QAlBW,WAEvBN,EAASJ,EAAeL,cAgBpB,0BAEF,wBAAQe,QAdiB,WAE3BN,EAASJ,EAAeD,kBAYtB,gC,iBC7CAY,EAAYxB,YAAY,CAC1BC,KAAO,iBACPC,aANsB,CACtBuB,iBAAkB,GAMlBpB,SAAW,CACPqB,MADO,SACDnB,GACFA,EAAMkB,iBAAkB,GAE5BE,OAJO,SAICpB,GACJA,EAAMkB,iBAAkB,MAKvBG,EAAcJ,EAAUV,QACtBU,IAAf,QCWeK,EA1BA,WACb,IAAMZ,EAAWC,cAIXY,EAASd,aAAY,SAACT,GAAD,OAAUA,EAAMwB,KAAKN,mBAChD,OACE,yBAAQL,UAAWC,IAAQW,OAA3B,UACE,4CACCF,GAAU,8BACT,+BACE,6BACE,mBAAGG,KAAK,IAAR,2BAEF,6BACE,mBAAGA,KAAK,IAAR,wBAEF,6BACE,wBAAQV,QAhBI,WACpBN,EAASW,EAAYD,WAeb,+B,gBCOGO,EA1BF,WACX,IAAMjB,EAAWC,cAMjB,OACE,sBAAME,UAAWC,IAAQU,KAAzB,SACE,kCACE,uBAAMI,SAPS,SAACC,GACpBA,EAAMC,iBACNpB,EAASW,EAAYF,UAKjB,UACE,sBAAKN,UAAWC,IAAQiB,QAAxB,UACE,uBAAOC,QAAQ,QAAf,mBACA,uBAAOC,KAAK,QAAQC,GAAG,aAEzB,sBAAKrB,UAAWC,IAAQiB,QAAxB,UACE,uBAAOC,QAAQ,WAAf,sBACA,uBAAOC,KAAK,WAAWC,GAAG,gBAE5B,mD,iBCbKC,EARK,WAClB,OACE,sBAAMtB,UAAWC,IAAQsB,QAAzB,SACE,oDCkBSC,MAbf,WACE,IAAMd,EAASd,aAAY,SAACT,GAAD,OAAWA,EAAMwB,KAAKN,mBACjD,OACE,eAAC,WAAD,WACA,cAAC,EAAD,KACEK,GAAU,cAAC,EAAD,IACXA,GAAU,cAAC,EAAD,IACT,cAAC,EAAD,QC+CSe,EAZDC,YAAe,CAOzBC,QAAU,CAAC5C,QAAW6C,EAAgBjB,KAAMkB,KChDnCC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAQ,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SAAyB,cAAC,EAAD,Q,kBCXtChD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,wB,kBCAtDD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,0B","file":"static/js/main.f9d73d6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3mObx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"UserProfile_profile__1BiAu\"};","import { createSlice } from \"@reduxjs/toolkit\";\n// A function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state.\nconst initialState = { counter: 0, showCounter: true }\nconst counterSlice = createSlice({\n    name : 'counter',   // any name, treat it as reducer function \n    // initialState : initialState,\n    initialState,       // modern JS\n    reducers : {      // all the if statments returns\n        // the below methods will automatically be called for you depending on which action is trigger\n        increment (state){\n            // here we are allowed to mutate the state \n            // redux toolkit internally uses a package called imgur which will automatically clone the existing the state and override only that part which is changing\n            state.counter ++;\n        },\n        decrement (state) {\n            state.counter --;\n        },\n        // payloads\n        increase (state, action) {\n            state.counter += action.payload;\n        },\n        toggleCounter (state) {\n            state.showCounter = !state.showCounter; \n        },\n\n    }\n});\n\nexport const counterActions = counterSlice.actions\nexport default counterSlice.reducer","import { Component } from 'react';\nimport classes from './Counter.module.css';\n\nimport { useSelector, useDispatch, connect } from 'react-redux';\n// A hook to access the redux store's state. This hook takes a selector function as an argument. The selector is called with the store state.\n// useDispatch --> A hook to access the redux dispatch function.\n\nimport { counterActions } from '../store/counter';\n\n\n\nconst Counter = () => {\n  // const counter = useSelector(state => state.counter);\n  const counter = useSelector(state => state.counter.counter );\n    // React Redux will automatically set up a subscription to the Redux store for this component. So your component will be updated and will receive the latest counter automatically whenever that data changes in the Redux store.\n\n  const dispatch = useDispatch();\n\n  // working with multiple state properties\n  const show = useSelector(state => state.counter.showCounter);\n\n  const incrementHandler = () => {\n    // dispatch({ type: 'increment' });\n    dispatch(counterActions.increment());\n  };\n\n  const increaseHandler = () =>{\n    // dispatch({type: 'increase', amount : 10});\n    dispatch(counterActions.increase(10));       // {type : SOME_UNIQUE_IDENTIFIER, payload: 10}\n  }\n\n  const decrementHandler = () => {\n    // dispatch({ type: 'decrement' });\n    dispatch(counterActions.decrement());\n  };\n\n\n  const toggleCounterHandler = () => {\n    // dispatch({type : 'toggle'});\n    dispatch(counterActions.toggleCounter());\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {show && <div className={classes.value}>{counter}</div> }\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase By 10</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n\n//   toggleCounterHandler() {}\n\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => {\n//   return {\n//     counter: state.counter\n//   };\n// }\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     increment: () => dispatch({ type: 'increment' }),\n//     decrement: () => dispatch({ type: 'decrement' }),\n//   }\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialAuthState = ({\n    isAuthenticated : false,\n})\n\nconst authSlice = createSlice({\n    name : 'authentication',\n    initialState : initialAuthState,\n    reducers : {\n        login(state){\n            state.isAuthenticated = true;\n        },\n        logout (state) {\n            state.isAuthenticated = false;\n        }\n    }\n})\n\nexport const authActions = authSlice.actions;\nexport default authSlice.reducer","import classes from './Header.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authActions } from '../store/auth';\n \n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const logoutHandler = ()=>{\n    dispatch(authActions.logout())\n  }\n  const isAuth = useSelector((state)=> state.auth.isAuthenticated)\n  return (\n    <header className={classes.header}>\n      <h1>Redux Auth</h1>\n      {isAuth && <nav>\n        <ul>\n          <li>\n            <a href='/'>My Products</a>\n          </li>\n          <li>\n            <a href='/'>My Sales</a>\n          </li>\n          <li>\n            <button onClick={logoutHandler}>Logout</button>\n          </li>\n        </ul>\n      </nav>}\n    </header>\n  );\n};\n\nexport default Header;\n","import classes from './Auth.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authActions } from '../store/auth';\n\nconst Auth = () => {\n  const dispatch = useDispatch();\n\n  const loginHandler = (event) =>{\n    event.preventDefault();\n    dispatch(authActions.login());\n  }\n  return (\n    <main className={classes.auth}>\n      <section>\n        <form onSubmit={loginHandler}>\n          <div className={classes.control}>\n            <label htmlFor='email'>Email</label>\n            <input type='email' id='email' />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='password'>Password</label>\n            <input type='password' id='password' />\n          </div>\n          <button>Login</button>\n        </form>\n      </section>\n    </main>\n  );\n};\n\nexport default Auth;\n","import classes from './UserProfile.module.css';\n\nconst UserProfile = () => {\n  return (\n    <main className={classes.profile}>\n      <h2>My User Profile</h2>\n    </main>\n  );\n};\n\nexport default UserProfile;\n","import { Fragment } from 'react';\nimport Counter from './components/Counter';\nimport Header from './components/Header';\nimport Auth from './components/Auth';\nimport UserProfile from './components/UserProfile';\n \nimport { useSelector } from 'react-redux'\n\n\n\nfunction App() {\n  const isAuth = useSelector((state) => state.auth.isAuthenticated);\n  return (\n    <Fragment>\n    <Header />\n    {!isAuth && <Auth />}\n    {isAuth && <UserProfile/>}\n      <Counter />\n    </Fragment>\n    \n  );\n}\n\nexport default App;\n","// Redux tool kit \n// $ npm install @ reduxjs/toolkit\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter\";\nimport authReducer from \"./auth\"\n// import { createSlice } from \"@reduxjs/toolkit\";\n// // A function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state.\n// const initialState = { counter: 0, showCounter: true }\n// const counterSlice = createSlice({\n//     name : 'counter',   // any name, treat it as reducer function \n//     // initialState : initialState,\n//     initialState,       // modern JS\n//     reducers : {      // all the if statments returns\n//         // the below methods will automatically be called for you depending on which action is trigger\n//         increment (state){\n//             // here we are allowed to mutate the state \n//             // redux toolkit internally uses a package called imgur which will automatically clone the existing the state and override only that part which is changing\n//             state.counter ++;\n//         },\n//         decrement (state) {\n//             state.counter --;\n//         },\n//         // payloads\n//         increase (state, action) {\n//             state.counter += action.payload;\n//         },\n//         toggleCounter (state) {\n//             state.showCounter = !state.showCounter; \n//         },\n\n//     }\n// });\n\n// const initialAuthState = ({\n//     isAuthenticated : false,\n// })\n\n// const authSlice = createSlice({\n//     name : 'authentication',\n//     initialState : initialAuthState,\n//     reducers : {\n//         login(state){\n//             state.isAuthenticated = true;\n//         },\n//         logout (state) {\n//             state.isAuthenticated = false;\n//         }\n//     }\n// })\n\n\n// creating a store with configureStore \nconst store = configureStore({\n    // it wants reudcer as a key\n    // global main reducer\n    // reducer : counterSlice.reducer           // NOTE: how create a reducers obj in counterSlice and how we add it in the store\n\n    // multiple state slices\n    // reducer : {counter :  counterSlice.reducer, auth: authSlice.reducer}\n    reducer : {counter :  counterReducer, auth: authReducer}\n})\n// it makes merging multiple reducers into one reducer easier thereafter.\n// export const counterActions = counterSlice.actions;       // with this we can use all methods define in createSlice\n// export const authActions = authSlice.actions;\nexport default store;  \n\n\n\n// // reducer function \n// const initialState = { counter: 0, showCounter: true }\n// const counterReducer = (state = initialState, action) => {\n\n//     // state.counter ++;\n//     // return state ; \n//     // wrong approach, while working with redux we should always override the existing state\n\n//     if (action.type === \"increment\")\n//         return {\n//             counter: state.counter + 1,\n//             showCounter : state.showCounter,      // need to showCounter snapshot coz if action.type == increment and we only have counter: state.counter + 1 then this will override the initalState\n//         };\n        \n//         // attaching payloads to the actions\n//     if(action.type === \"increase\"){\n//         return {\n//             counter : state.counter + action.amount,\n//             showCounter : state.showCounter,\n//         }\n//     }\n//     if (action.type === \"decrement\")\n//         return {\n//             counter: state.counter - 1,\n//             showCounter : state.showCounter,\n//         };\n//     if(action.type === \"toggle\"){\n//         return {\n//             counter: state.counter,\n//             showCounter : !state.showCounter,\n//         }\n//     }\n \n//     return state;\n// };\n \n// creating our store\n// const store = configureStore({ reducer: counterReducer });\n \n// export default store;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n// store must be imported without {} brakets\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( <Provider store={store} ><App /></Provider> );\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"Auth_auth__3QLaR\",\"control\":\"Auth_control__3bkp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1U4hj\",\"value\":\"Counter_value__2JpT-\"};"],"sourceRoot":""}